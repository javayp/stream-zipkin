buildscript {
	ext {
		springBootVersion = '1.5.12.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Edgware.SR3'
}

dependencies {
	compile ('org.springframework.boot:spring-boot-starter-web')
	
	//compile ('org.springframework.cloud:spring-cloud-sleuth-zipkin')
 	//compile ("org.springframework.cloud:spring-cloud-starter-zipkin")
    //compile ("org.springframework.amqp:spring-rabbit")
    
    //You can accumulate and send span data over Spring Cloud Stream by including the spring-cloud-sleuth-stream jar
	compile ('org.springframework.cloud:spring-cloud-sleuth-stream')
	//adding a Channel Binder implementation This will automatically turn your app into a producer of messages with payload type Spans
	compile ('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
   
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
